********************** NP Hard And NP Complete Discussion ************************

Polynomial Time Algorithms :
	Binary Search		  - log n
	Linear Search		  - n
	Insertion Sort		  - n^2
	Merge Sort 			  - n logn
	Matrix Multiplication - n^3
	
Exponential Time Algorithms :
	0/1 Knapsack		  - 2^n
	Traveling SP		  - 2^n
	Sum of Subsets		  - 2^n
	Graph Coloring		  - 2^n
	Hamiltonian Cycle	  - 2^n
	
NP Hard And NP Complete is a set of guidelines or framework which is used to solve an exponential time problems to polynomial time problems.

Two important points are as follows :
1. When we are not able to write polynomial time deterministic algorithms for a problem, we should try to write polynomial time non-deterministic algorithms for it.

	There are two types of algorithms.

	1. Deterministic Algorithms : These are those type of algoritms for which we know each and every step clearly.
	2. Non-deterministic Algorithms : These are those algorithms for which, for every step we are not sure, how it is working. It is a combination of deterministic  and non-deterministic steps. Non-deterministic steps are written in the hope, that someday, we will crack it in the near future and the non-deterministic steps are always considered to be O(1).


	Algorithm : NSearch(A, n , key) {
		j = choice();			- Non-deterministic : O(1)
		if (key == A[j]) {
			write(j);
			success();			- Non-deterministic	: O(1)
		}
		
		write(0);
		failure();				- Non-deterministic : O(1)
				
	}

	Classes :

	1. P 	- Set of Deterministic Algorithms with polynomial time solutions i.e Linear Search , Binary Search
	2. NP	- Set of non-deterministic algorithms with polynomial time solutions. It means currently we don't know it but in the near future, we'll know this. Ex - 	    All  exponential time algorithms mentioned above .

2. When we are unable to find the solution for the exponential problems in polynomial time, then, at least , we should try to find the similarity between all the  exponentials problems such that if one problem is solved, all other problem is solved.

The base problem is satisfiablity problem. Plz find the picture attached in the repository.

# NOTE : NP Hard Problems are those problems for which we want to have a polynomial time solutions but we don't even have any non-deterministic solutions for it.

## Updated Notes

P (Polynomial Time)
P is a class of problems that can be solved quickly by a computer.
"Quickly" means that the time it takes to solve these problems grows at a manageable rate (polynomial rate) as the size of the problem increases.
Example: Imagine you have a list of names and you want to find a specific name. A computer can do this efficiently by checking each name one by one. Even if the list is very long, the time it takes to find the name doesn't grow too fast.
NP (Nondeterministic Polynomial Time)
NP is a class of problems where if you are given a potential solution, you can check quickly whether it is correct.
Finding the solution might be hard and take a long time, but checking if a given solution is correct is quick.
Example: Imagine you have a puzzle, and you don't know how to solve it. Someone gives you a completed puzzle (a solution), and you can quickly see that the pieces fit perfectly. Finding the solution from scratch might take a lot of trial and error, but verifying it is easy.
Comparing P and NP
P problems: Can be both solved and checked quickly.
Example: Adding two numbers together is a P problem because you can do it quickly and check the result quickly.
NP problems: May be hard to solve quickly, but any proposed solution can be checked quickly.
Example: Solving a Sudoku puzzle is an NP problem. Finding the solution might take a long time, but once you have a completed puzzle, checking if it's correct is quick.


To understand the difference between NP-hard and NP-complete problems, it's important to first understand some concepts from computational complexity theory:

P (Polynomial time): This class includes decision problems (problems with yes/no answers) that can be solved by a deterministic Turing machine in polynomial time.

NP (Nondeterministic Polynomial time): This class includes decision problems for which a given solution can be verified in polynomial time by a deterministic Turing machine.

NP-Hard Problems
Definition: A problem is NP-hard if every problem in NP can be reduced to it in polynomial time. This means that if you could solve an NP-hard problem in polynomial time, you could solve all NP problems in polynomial time.
Characteristics:
NP-hard problems are at least as hard as the hardest problems in NP.
NP-hard problems do not have to be in NP, meaning they do not have to be decision problems, and even if they are, they do not have to have solutions that can be verified in polynomial time.
NP-Complete Problems
Definition: A problem is NP-complete if it satisfies two conditions:
It is in NP.
It is NP-hard.
